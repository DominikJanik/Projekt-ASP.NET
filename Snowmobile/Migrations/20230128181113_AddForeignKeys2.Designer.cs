// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnowmobileShop.Data;

#nullable disable

namespace SnowmobileShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230128181113_AddForeignKeys2")]
    partial class AddForeignKeys2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("SnowmobileShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SnowmobileShop.Models.RentalDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("RentalDays");
                });

            modelBuilder.Entity("SnowmobileShop.Models.RentalTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalDayId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RentalDayId");

                    b.HasIndex("UserId");

                    b.ToTable("RentalHours");
                });

            modelBuilder.Entity("SnowmobileShop.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("SnowmobileShop.Models.ShoppingCartLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalTimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RentalTimeId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartLines");
                });

            modelBuilder.Entity("SnowmobileShop.Models.SnowmobileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SnowmobileTypes");
                });

            modelBuilder.Entity("SnowmobileShop.Models.Snowmobile", b =>
                {
                    b.HasBaseType("SnowmobileShop.Models.Product");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Horsepower")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SnowmobileTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearOfProduction")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SnowmobileTypeId");

                    b.ToTable("Snowmobiles", (string)null);
                });

            modelBuilder.Entity("SnowmobileShop.Models.Trip", b =>
                {
                    b.HasBaseType("SnowmobileShop.Models.Product");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.ToTable("Trips", (string)null);
                });

            modelBuilder.Entity("SnowmobileShop.Models.RentalDay", b =>
                {
                    b.HasOne("SnowmobileShop.Models.Product", "Product")
                        .WithMany("Booked")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SnowmobileShop.Models.RentalTime", b =>
                {
                    b.HasOne("SnowmobileShop.Models.RentalDay", "RentalDay")
                        .WithMany("RentalHours")
                        .HasForeignKey("RentalDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalDay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnowmobileShop.Models.ShoppingCart", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SnowmobileShop.Models.ShoppingCartLine", b =>
                {
                    b.HasOne("SnowmobileShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnowmobileShop.Models.RentalTime", "RentalTime")
                        .WithMany()
                        .HasForeignKey("RentalTimeId");

                    b.HasOne("SnowmobileShop.Models.ShoppingCart", null)
                        .WithMany("Lines")
                        .HasForeignKey("ShoppingCartId");

                    b.Navigation("Product");

                    b.Navigation("RentalTime");
                });

            modelBuilder.Entity("SnowmobileShop.Models.Snowmobile", b =>
                {
                    b.HasOne("SnowmobileShop.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("SnowmobileShop.Models.Snowmobile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnowmobileShop.Models.SnowmobileType", "SnowmobileType")
                        .WithMany()
                        .HasForeignKey("SnowmobileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SnowmobileType");
                });

            modelBuilder.Entity("SnowmobileShop.Models.Trip", b =>
                {
                    b.HasOne("SnowmobileShop.Models.Product", null)
                        .WithOne()
                        .HasForeignKey("SnowmobileShop.Models.Trip", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnowmobileShop.Models.Product", b =>
                {
                    b.Navigation("Booked");
                });

            modelBuilder.Entity("SnowmobileShop.Models.RentalDay", b =>
                {
                    b.Navigation("RentalHours");
                });

            modelBuilder.Entity("SnowmobileShop.Models.ShoppingCart", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
